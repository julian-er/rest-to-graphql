type Query {
  "Check data of the all seasons!"  
  SeasonsList: [Season!]!
  "You must pass the year as a parameter (string) to filter the races. If the year entered does not coincide with the years where there were careers, from 1950 to the present, the current year is automatically set."
  RacesByYear(year: String!): [Race!]!
  "You must provide the year and round of the race you're looking for. If the round <0 || round >100 the sistem inform that, but, if you select a round without a career you'll see an empty body"
  RaceSelect(year: String!, round: Int!): Race
  "pageElement and page are for limit the results, if you wish you can omit that parameters"
  HistoryDrivers(pageElement:Int, page:Int): [Driver!]!
}

# JSON to TS (JSON to ts.com) to obtain the schema of a JSON object in API
# interface Season {
#     season: string;
#     url: string;
# }
#Convert to schema graphQL

"Seasons info, obtain from API REST"
type Season {
  "Year is equal 'season' in API REST"
  year: String!
  url: String!
  urlMobile: String!
}

# JSON to TS (JSON to ts.com) to obtain the schema of a JSON object in API
# interface Race {
#     season: string;
#     round:string;
#     url:string;
#     raceName:string;
#     Circuit: Circuit;
#     date:string;
#     time:string;
# }
#
# interface Circuit{
#     circuitId:string;
#     url:string;
#     circuitName:string;
#     Location: Location;
# }
#
# interface Location {
#     lat: string;
#     long:string;
#     locality:string;
#     country:string;
# }
#Convert to schema graphQL

"Race info, obtain from API REST"
type Race {
  season: String!
  round: String!
  url: String!
  urlMobile: String!
  "name is equal to raceName in API REST"
  name: String!
  "circuit is equal to Circuit in API REST"
  circuit: Circuit!
  date: String!
  "time isn't required because the oldest races don't have it"
  time: String
}
"Circuit info, obtain from API REST"
type Circuit {
  "id is equal to ciruitId in API REST"
  id: String!
  url: String!
  urlMobile: String!
  "name is equal to circuitName in API REST"
  name: String!
  "location is equal to Location in API REST"
  location: Location!
}
"Race Location, obtain from API REST"
type Location {
  lat: String!
  long: String!
  locality: String!
  country: String!
}

# JSON to TS (JSON to ts.com) to obtain the schema of a JSON object in API
# interface Driver {
#     driverId: string;
#     url:string;
#     givenName:string;
#     familyName:string;
#     dateOfBirth: string;
#     nationality:string;
#     code?:string;
#     permanentNumber?:string;
# }
#Convert to schema graphQL

type Driver {
    driverId: String!
    url:String!
    name: String!
    dateOfBirth:String!
    nationality:String!
    code:String
    permanentNumber:String
}